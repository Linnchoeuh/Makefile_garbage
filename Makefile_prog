NAME = mini_printf
CC = gcc

#INCLUDE
INCLUDE = ../include/
GCC_INCLUDE_PATH = $(foreach dir,$(INCLUDE),-I$(dir))

#LIB
LIB = ../lib/
LIB_FLAG = -lmy
LIB_INCLUDE_DIR = ../include/
GCC_LIB_PATH = $(foreach dir,$(LIB),-L$(dir))
CLEAN_LIB_EXCLUDE = $(foreach dir,$(LIB),-not -path "$(dir)*")

#TEST
TEST_NAME = test_$(NAME)
TEST_FOLDER = ../tests/
TEST_FOLDER_GCC_EXLUDE = $(foreach dir,$(TEST_FOLDER),-not -path "$(dir)*")
FILE_TO_EXCLUDE = main.c
EXCLUDED_FIND_FILE = $(foreach file,$(FILE_TO_EXCLUDE),-not -iname "$(file)")
TEST_FILE = \
	$(shell find ../ -name "*.c" $(EXCLUDED_FIND_FILE) $(CLEAN_LIB_EXCLUDE))

#SRC
SRC = $(shell find ../ -name "*.c" $(CLEAN_LIB_EXCLUDE) \
$(TEST_FOLDER_GCC_EXLUDE))
OBJ = $(SRC:.c=.o)
OUTPUT = ../

#FLAGS
FLAGS = -g3 -std=c11 -Wextra -Wall -Werror
ECHO = echo -e

DEFLT	=	"\033[00m"
PINK	=	"\033[0;36m"
GREEN	=	"\033[1;32m"
TEAL	=	"\033[1;36m"
RED 	=	"\033[0;31m"
BLUE	=	"\033[34m"
PURPLE	=	"\033[0;35m"
BLINK 	= 	"\033[1;92m"
SBLINK	= 	"\033[0m"
INVERT  =	"\033[7m"

all:
	@make object -j32 && make build

object:$(NAME)
%.o : %.c
	@if [ -f $@ ]; then\
		rm $@;\
	fi
	@$(CC) -o $@ -c $< $(GCC_INCLUDE_PATH) $(GCC_LIB_PATH) \
	$(LIB_FLAG) $(FLAGS) && \
	$(ECHO) $(BLINK) "[OK]"$(SBLINK) $(PINK) $< $(DEFLT) || \
	$(ECHO) $(RED) "[KO]" $(PINK) $< $(DEFLT);
$(NAME):$(OBJ)
	@$(ECHO) $(BLUE) "[END]"$(DEFLT)

build:
	@$(CC) $(OBJ) -o $(NAME) $(GCC_INCLUDE_PATH) $(GCC_LIB_PATH) \
	$(LIB_FLAG) $(FLAGS) && \
	$(ECHO) $(BLINK) "[OK]"$(SBLINK) $(PINK) $(NAME) $(DEFLT) || \
	$(ECHO) $(RED) "[KO]" $(PINK)$(NAME)$(DEFLT);

clean:
	@find . -name "*.o" $(CLEAN_LIB_EXCLUDE) -delete; \
	find -name "*~" -delete && \
	$(ECHO) $(BLINK) "[CLEAN DONE]" $(DEFLT)

fclean: clean
	@find .	-name "*.a" $(CLEAN_LIB_EXCLUDE) -delete \
		-or -name "*.exe" -delete \
		-or -name "a.out" -delete \
		-or -name "*.so" -delete  \
		-or -name "vgcore*" -delete
	@$(ECHO) $(GREEN) "All temporal file deleted!" $(DEFLT)
	@find -maxdepth 1 -name $(NAME) -delete
	@$(ECHO) $(GREEN) "Executable deleted!" $(DEFLT)

re: fclean all

install: all
	@sudo mv $(NAME) /usr/bin/
	@$(ECHO) $(GREEN) "Program installed!" $(DEFLT)

uninstall:
	@sudo rm -i /usr/bin/$(NAME)
	@$(ECHO) $(GREEN) "Program deleted!" $(DEFLT)

lib: FORCE
	@for lib_dir in $(LIB); do \
		$(ECHO) $(BLINK)$(PURPLE)" [COMPILING LIBRARIES IN $$lib_dir]"$(DEFLT); \
		dirs=$$(find $$lib_dir -maxdepth 1 -mindepth 1 -type d); \
		for lib_path in $$dirs; do \
			$(ECHO) $(BLINK)$(BLUE)" [COMPILING LIBRARY : $$lib_path]"$(DEFLT); \
			make -C $$lib_path; \
			lib_name=$$(basename $$lib_path); \
			mkdir $(LIB_INCLUDE_DIR)$$lib_name; \
			cp -r $$lib_path/include/* $(LIB_INCLUDE_DIR)$$lib_name; \
			mv $$lib_path/*.a $$lib_dir; \
		done \
	done

lib_clean:
	@find .	-name "*.a" -delete
	@$(ECHO) $(GREEN) "[.a static libraries files deleted.]" $(DEFLT)
	@for lib_dir in $(LIB); do \
		$(ECHO) $(BLINK)$(PURPLE)" [CLEANING LIBRARIES IN $$lib_dir]"$(DEFLT); \
		dirs=$$(find $$lib_dir -maxdepth 1 -mindepth 1 -type d); \
		for lib_path in $$dirs; do \
			$(ECHO) $(BLINK)$(BLUE)" [CLEANING LIBRARY : $$lib_path]"$(DEFLT); \
			make -C $$lib_path fclean; \
			lib_name=$$(basename $$lib_path); \
			rm -rf $(LIB_INCLUDE_DIR)$$lib_name; \
		done \
	done

lib_re: lib_clean lib

tests_run: lib
	@find .	-name "*.gcno" -delete \
		-or -name "*.gcda" -delete \
		-or -name "*.gcov" -delete
	@$(CC) -o $(TEST_NAME) $(TEST_FILE) $(GCC_INCLUDE_PATH) \
	$(GCC_LIB_PATH) $(LIB_FLAG) $(FLAGS) --coverage -lcriterion && \
	./$(TEST_NAME);

coverage:
	@gcovr -r ../ --exclude $(TEST_FOLDER)

branches:
	@gcovr -r ../ --branches --exclude $(TEST_FOLDER)

test: tests_run coverage branches

FORCE:
